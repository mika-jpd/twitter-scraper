services:
  api:
    container_name: api
    build:
      context: .
      dockerfile: api.dockerfile
      platforms:
        - linux/amd64
    ports:
      - 8000:8000
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - scraper-network
    volumes:
      - ./db:/db
      - ./output:/output

  redis:
    container_name: redis
    image: "redis:latest"
    networks:
      - scraper-network

  worker:
    # command: ["python", "-m", "app.worker.worker"]  - already defined in worker.dockerfile
    environment:
      - OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
    container_name: worker
    build:
      context: .
      dockerfile: worker.dockerfile
      platforms:
        - linux/amd64
    depends_on:
      - redis
      - api
    restart: unless-stopped
    networks:
      - scraper-network
    volumes:
      - ./db:/db
      - ./output:/output

  sqlite3-db:
    container_name: sqlite3-db
    build:
      context: .
      dockerfile: db.dockerfile
      platforms:
        - linux/amd64
    ports:
      - 8080:8080
    restart: unless-stopped
    networks:
      - scraper-network
    volumes:
      - ./db:/db
      - ./output:/output

  scheduler:
    container_name: scheduler
    build:
      context: .
      dockerfile: scheduler.dockerfile
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - scraper-network
    volumes:
      - ./db:/db
      - ./output:/output

networks:
  scraper-network:
    driver: bridge
